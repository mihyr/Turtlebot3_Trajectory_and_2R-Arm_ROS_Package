#!/usr/bin/env python
"""

**Info**: This *Trajectory node* publishes velicity message for figure eight trajectory

**Publishers**:
    turtle_path - Publish x and y coordinates of turtle to visualize in RViz
    cmd_vel - publish linear (Vx) and angular (Y) velocity of turtlebot

**Services**:
    pause_turtle - stops turtle until further command (initially robot is in stop state)
    resume_turtle - resumes publishing cmd_vel message and init/continue motion

**Parameters**:
    Height - height of figure 8
    Width - width of igure 8
    Time - Time Period req for one loop (figure eight tracectory)
    Pub_Frequency - ROS Publishing freq Rate

**Note**: TF Static broadcaster transforms world to odom and orients turtlebot3 in direction for figure 8 trajectory. Robot/odom assumes it to be (0,0,0)

"""

import rospy
from nav_msgs.msg import Path
from geometry_msgs.msg import Point, Quaternion, PoseStamped, Pose, Vector3, Twist, TransformStamped
from homework2.trajectorymath import traj_coordinates, xy_derivatives
import tf2_ros
from tf.transformations import quaternion_from_euler, quaternion_about_axis
from math import atan2
from std_srvs.srv import Empty, EmptyResponse

#Import Constants from rosparam
H = rospy.get_param("/H")
W = rospy.get_param("/W")
T = rospy.get_param("/Ti")

#Import frequency rate from rosparam
freq = rospy.get_param("/Fr")

#Robot pause/resume bool variable: Pause(True) state by-default
pause_bot = True

def main():

    #initialize node
    rospy.init_node('trajectory')

    #logerr msg to check if node is running
    rospy.logerr("This is just a check for trajectory node, ignore me")

    #define ros frequency
    hz = rospy.Rate(freq)
    #initialize time
    time = 0

    #init Path publisher
    path_publisher = rospy.Publisher("turtle_path", Path, queue_size=10)
    path=Path()
    path.poses = []

    #init Point_publisher to publish x and y coordinates to topic: turtle_point
    point_publisher = rospy.Publisher("turtle_point", Point, queue_size=10)
    
    #init vel_publisher to publish linear and angular vel to topic: cmd_vel
    vel_publisher = rospy.Publisher("cmd_vel", Twist, queue_size=10)
    velocity=Twist()    
    
    #Calculate quaternion (required for world to odom transformation)
    x_coor, y_coor  = traj_coordinates(H,W,time,T)
    v_linear, v_angular, theta = xy_derivatives(x_coor,y_coor,H,W,time,T)
    quaternion = quaternion_from_euler(0,0,theta)
    #quaternion = quaternion_about_axis(theta, [0,0,1])

    #Broadcast Static transform: World frame to odom frame
    broadcaster = tf2_ros.StaticTransformBroadcaster()
    world2odom_tf = TransformStamped()
    world2odom_tf.header.stamp = rospy.Time.now()
    world2odom_tf.header.frame_id = "world"
    world2odom_tf.child_frame_id = "odom"
    world2odom_tf.transform.translation = Vector3(0,0,0)
    world2odom_tf.transform.rotation = Quaternion(*quaternion)
    broadcaster.sendTransform(world2odom_tf)


    rospy.loginfo(world2odom_tf.transform.rotation)
    #Now the turtle is oriented towards direction in which figure8 begins. It assumes it to be (0,0,0)

    #Define pause_callback and resume_callback for pause and resume services
    def pause_callback(msg):
        global pause_bot
        pause_bot = True

        #set velocity to zero
        velocity.linear = Vector3(0,0,0)
        velocity.angular = Vector3(0,0,0)
        vel_publisher.publish(velocity)

        return EmptyResponse()

    def resume_callback(msg):
        global pause_bot
        pause_bot = False

        return EmptyResponse()

    #init pause and resume services
    pause_srv = rospy.Service("pause_turtle", Empty, pause_callback)
    resume_srv = rospy.Service("resume_turtle", Empty, resume_callback)

    
    #iteration loop
    while not rospy.is_shutdown():
        
        #Check robot state
        if pause_bot == False:
            
            #Calculate x,y coordinates, linear and angular velocity
            x_coor, y_coor  = traj_coordinates(H,W,time,T)
            v_linear, v_angular, theta = xy_derivatives(x_coor,y_coor,H,W,time,T)

            #log Data to terminal
            rospy.loginfo(f"info message: Time {time}, x:{v_linear}, y:{v_angular}")
            
            #cmd_vel loop: Update and Publish Velocity
            velocity.linear = Vector3(v_linear,0,0)
            velocity.angular = Vector3(0,0,v_angular)
            vel_publisher.publish(velocity)

            #point loop: publish points
            point_publisher.publish(Point(x_coor,y_coor,1))

            #Path loop: update and Publish path
            path.header.seq = 1
            path.header.stamp = rospy.Time.now()
            path.header.frame_id = "world"
            path.poses.append(PoseStamped(header = path.header, 
                                            pose = Pose(position = Point(x_coor,y_coor,0), orientation = Quaternion(0,0,0,1))))
            path_publisher.publish(path)

            #Remove old path data to reduce load on system
            if len(path.poses)>=200:
                path.poses.pop(0)
                    
            #update time 
            if time == T:
                time=0
            else: 
                time += 1/freq
        
        #Just sleep!
        hz.sleep()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 