#!/usr/bin/env python
"""This node Publish

"""
import rospy

from nav_msgs.msg import Path
from geometry_msgs.msg import Point, Quaternion, PoseStamped, Pose, Vector3, Twist, TransformStamped
from homework2.trajectorymath import traj_coordinates, xy_derivatives
import tf2_ros
from tf.transformations import quaternion_from_euler, quaternion_about_axis
from math import atan2

#Import Constants from rosparam
H = rospy.get_param("/H")
W = rospy.get_param("/W")
T = rospy.get_param("/Ti")
#Define frequency rate
freq = rospy.get_param("/Fr")

def main():
    #initialize node
    rospy.init_node('trajectory')
    #logerr msg to check if node is running
    rospy.logerr("This is just a check for trajectory node, ignore me")
    #define ros frequencys
    hz = rospy.Rate(freq)
    #initialize time
    time = 0


    #init Path publisher
    path_publisher = rospy.Publisher("turtle_path", Path, queue_size=10)
    path=Path()
    path.poses = []

    #init Point_publisher and publish x and y coordinates
    point_publisher = rospy.Publisher("turtle_point", Point, queue_size=10)
    
    #init cmd_vel
    vel_publisher = rospy.Publisher("cmd_vel", Twist, queue_size=10)
    velocity=Twist()    

    x_coor, y_coor  = traj_coordinates(H,W,time,T)
    v_linear, v_angular, theta = xy_derivatives(x_coor,y_coor,H,W,time,T)
    quaternion = quaternion_from_euler(0,0,theta)
    #quaternion = quaternion_about_axis(theta, [0,0,1])

    #Broadcaster
    broadcaster = tf2_ros.StaticTransformBroadcaster()
    world2odom_tf = TransformStamped()
    world2odom_tf.header.stamp = rospy.Time.now()
    world2odom_tf.header.frame_id = "world"
    world2odom_tf.child_frame_id = "odom"
    world2odom_tf.transform.translation = Vector3(0,0,0)
    world2odom_tf.transform.rotation = Quaternion(*quaternion)
    broadcaster.sendTransform(world2odom_tf)
    rospy.loginfo(world2odom_tf.transform.rotation)


    
    #iteration loop
    while not rospy.is_shutdown():


        x_coor, y_coor  = traj_coordinates(H,W,time,T)
        v_linear, v_angular, theta = xy_derivatives(x_coor,y_coor,H,W,time,T)
        #rospy.loginfo(f"info message: Time {time}, x:{v_linear}, y:{v_angular}")
        #cmd_vel loop
        velocity.linear = Vector3(v_linear,0,0)
        velocity.angular = Vector3(0,0,v_angular)
        vel_publisher.publish(velocity)
        #point loop
        point_publisher.publish(Point(x_coor,y_coor,1))

        #Path loop
        path.header.seq = 1
        path.header.stamp = rospy.Time.now()
        path.header.frame_id = "world"
        path.poses.append(PoseStamped(header = path.header, 
                                        pose = Pose(position = Point(x_coor,y_coor,0), orientation = Quaternion(0,0,0,1))))
        path_publisher.publish(path)
        if len(path.poses)>=200:
            path.poses.pop(0)
                

        #cmd_vel loop
        #update time and sleep
        time += 1/freq
        hz.sleep()



if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 